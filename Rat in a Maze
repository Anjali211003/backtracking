  struct Choice{
        char dname;
        int dx,dy;
    };
    bool isSolved(int x,int y,int n){
        return x==n-1 && y==n-1;
    }
    
    bool isValid(int x,int y,int n,const vector<vector<int>>&arr){
        return x>=0 && x<n && y>=0 && y<n && arr[x][y]==1;
    }
    void solve(int x,int y, const int n,vector<string>&res,string &path,vector<vector<int>> &arr,const vector<Choice> &choices){
        if(isSolved(x,y,n))
        {
            res.push_back(path);
            return;
        }
        for(const auto &choice:choices){
            int newx=x+choice.dx;
            int newy=y+choice.dy;
            if(isValid(newx,newy,n,arr)){
                arr[x][y]=0;
                path.push_back(choice.dname);
                solve(newx,newy,n,res,path,arr,choices);
                arr[x][y]=1;
                path.pop_back();
            }
        }
    }
    class Solution{
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>res;
        string path="";
        vector<Choice>choices={{'U',-1,0},{'D',1,0},{'L',0,-1},{'R',0,1}};
        if(m[0][0]==1){
            solve(0,0,n,res,path,m,choices);
        }
        return res;
    }
};
